1. Mistyping the name of output function printf as print in a program.

2. Using capital letter where a lowercase letter should be used (for example typing Main instead of main).

3. A calculation in an assignment statement must be on the right side of the = operator.
It's a compilation error to place a calculation on the left side of an assignment operator.

4. Forgetting to precede a variable in a scanf statement with an ampersand (&) when that variable should, in fact,
  be preceded by an ampersand results in an execution-time error.
On many systems, this cause a "segmentation fault" or "access voilation."
Such as error occurs when a user's program attempts to access a part of the computer's memory to which in dues not have access previlages.

5. Preceding a variable included in a printf statement with an ampersand when, in fact, 
  that variable should not be preceded by an ampersand.

6. An attempt to divide by zero is normally undefined on computer systems and generally result in fatal error that cause program to terminate immediately without having successfully performed its job.
Nonfatal errors allow programs to run to completion after producing incorrect result.

7. A syntax error occurs if the two symbols in any of the operators ==, !=, >= and <= are seprated by space.

8. Confusing the equality operator == with the assignment operator. 
To avoid this confusion, the equality operator should be read "double equals" and the assignment operator should be read "gets" or "is assigned the value of".
As you'll see, confusing these operator may not cause an easy-to-recognize compilation error, but may cause extremely subtle logic error.

9. Placing a comma between convesion specifies in the fromat control string of a scanf statement.

10. Placing a semicolon immediately to the right of the right parenthesis after the condition in an if statement.

